// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cubic_bezier_point_cpp
NumericVector cubic_bezier_point_cpp(double t, NumericVector p0, NumericVector p1, NumericVector p2, NumericVector p3);
RcppExport SEXP _kanjistat_cubic_bezier_point_cpp(SEXP tSEXP, SEXP p0SEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP p3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p3(p3SEXP);
    rcpp_result_gen = Rcpp::wrap(cubic_bezier_point_cpp(t, p0, p1, p2, p3));
    return rcpp_result_gen;
END_RCPP
}
// cubic_bezier_curve_cpp
NumericMatrix cubic_bezier_curve_cpp(NumericVector t, NumericVector p0, NumericVector p1, NumericVector p2, NumericVector p3);
RcppExport SEXP _kanjistat_cubic_bezier_curve_cpp(SEXP tSEXP, SEXP p0SEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP p3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p3(p3SEXP);
    rcpp_result_gen = Rcpp::wrap(cubic_bezier_curve_cpp(t, p0, p1, p2, p3));
    return rcpp_result_gen;
END_RCPP
}
// cubic_bezier_curve_eqspaced_cpp
NumericMatrix cubic_bezier_curve_eqspaced_cpp(double density, int n, NumericVector p0, NumericVector p1, NumericVector p2, NumericVector p3);
RcppExport SEXP _kanjistat_cubic_bezier_curve_eqspaced_cpp(SEXP densitySEXP, SEXP nSEXP, SEXP p0SEXP, SEXP p1SEXP, SEXP p2SEXP, SEXP p3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type density(densitySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p2(p2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p3(p3SEXP);
    rcpp_result_gen = Rcpp::wrap(cubic_bezier_curve_eqspaced_cpp(density, n, p0, p1, p2, p3));
    return rcpp_result_gen;
END_RCPP
}
// bezier_curve_cpp
NumericMatrix bezier_curve_cpp(NumericMatrix beziermat, int ncurves, double point_density, bool eqspaced);
RcppExport SEXP _kanjistat_bezier_curve_cpp(SEXP beziermatSEXP, SEXP ncurvesSEXP, SEXP point_densitySEXP, SEXP eqspacedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type beziermat(beziermatSEXP);
    Rcpp::traits::input_parameter< int >::type ncurves(ncurvesSEXP);
    Rcpp::traits::input_parameter< double >::type point_density(point_densitySEXP);
    Rcpp::traits::input_parameter< bool >::type eqspaced(eqspacedSEXP);
    rcpp_result_gen = Rcpp::wrap(bezier_curve_cpp(beziermat, ncurves, point_density, eqspaced));
    return rcpp_result_gen;
END_RCPP
}
// ftestloop
NumericVector ftestloop(int n);
RcppExport SEXP _kanjistat_ftestloop(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(ftestloop(n));
    return rcpp_result_gen;
END_RCPP
}
// itestloop
NumericVector itestloop(int n);
RcppExport SEXP _kanjistat_itestloop(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(itestloop(n));
    return rcpp_result_gen;
END_RCPP
}
// idtestloop
NumericVector idtestloop(int n);
RcppExport SEXP _kanjistat_idtestloop(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(idtestloop(n));
    return rcpp_result_gen;
END_RCPP
}
// match_diagonal_trafo
List match_diagonal_trafo(NumericMatrix points1, NumericMatrix points2);
RcppExport SEXP _kanjistat_match_diagonal_trafo(SEXP points1SEXP, SEXP points2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type points1(points1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type points2(points2SEXP);
    rcpp_result_gen = Rcpp::wrap(match_diagonal_trafo(points1, points2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_kanjistat_cubic_bezier_point_cpp", (DL_FUNC) &_kanjistat_cubic_bezier_point_cpp, 5},
    {"_kanjistat_cubic_bezier_curve_cpp", (DL_FUNC) &_kanjistat_cubic_bezier_curve_cpp, 5},
    {"_kanjistat_cubic_bezier_curve_eqspaced_cpp", (DL_FUNC) &_kanjistat_cubic_bezier_curve_eqspaced_cpp, 6},
    {"_kanjistat_bezier_curve_cpp", (DL_FUNC) &_kanjistat_bezier_curve_cpp, 4},
    {"_kanjistat_ftestloop", (DL_FUNC) &_kanjistat_ftestloop, 1},
    {"_kanjistat_itestloop", (DL_FUNC) &_kanjistat_itestloop, 1},
    {"_kanjistat_idtestloop", (DL_FUNC) &_kanjistat_idtestloop, 1},
    {"_kanjistat_match_diagonal_trafo", (DL_FUNC) &_kanjistat_match_diagonal_trafo, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_kanjistat(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
